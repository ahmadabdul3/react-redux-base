#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('therapy-app:server');
var http = require('http');

// var mongoose = require('mongoose');
// var chatMessageSchema = require('../models/chat_message');
// mongoose.connect(process.env.MONGODB_URI);
// var ChatMessage = mongoose.model('ChatMessage');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// /**
//   Socket io
// */
// var io = require('socket.io')(server);
// io.on('connection', function(socket) {
//   console.log(socket.handshake.query['roomName']);
//   var roomName = socket.handshake.query['roomName'];
//   // - should probably destroy the room
//   //   when there are no more users in it
//   //
//   // - does socket.io do this automatically?
//   socket.join(roomName);
//   console.log('a user connected');
//
//   socket.on('message', function(data) {
//     var message = data.text;
//     var roomName = data.roomName;
//     var apnDeviceToken = data.apnDeviceToken;
//     var senderId = data.senderId;
//     var receiverId = data.receiverId;
//     var name = data.name;
//     var deviceType = data.deviceType;
//
//     console.log('data: ', data);
//
//     var chatMessage = new ChatMessage({
//       text: message,
//       senderId: senderId,
//       receiverId: receiverId,
//     });
//     chatMessage.save(function (err, savedChatMessage) {
//       // if (err) { return next(err); }
//     });
//
//     // send push notification if a device token exists
//     if (apnDeviceToken) {
//       apnService.sendNotification(
//         apnDeviceToken,
//         deviceType,
//         name + ': ' + message,
//         {
//           someData: 'data data',
//         }
//       );
//     }
//
//     io.to(roomName).emit('message', data);
//   });
//
//   socket.on('manualDisconnect', function() {
//     console.log('disconnecting');
//     socket.disconnect();
//   });
//
//   socket.on('disconnect', function() {
//     console.log('user disconnected');
//   });
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
